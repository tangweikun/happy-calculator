{"version":3,"sources":["AutoScalingText.js","CalculatorDisplay.js","CalculatorKey.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["AutoScalingText","props","useState","scale","setScale","node","useRef","useEffect","current","actualScale","parentNode","offsetWidth","className","style","transform","ref","children","CalculatorDisplay","value","rest","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","CalculatorKey","onPress","text","onClick","CalculatorOperations","prevValue","nextValue","_","numberKeys","Array","from","length","index","Calculator","setValue","displayValue","setDisplayValue","operator","setOperator","waitingForOperand","setWaitingForOperand","inputDigit","digit","String","performOperation","nextOperator","inputValue","currentValue","newValue","toggleSign","fixedDigits","replace","toFixed","inputPercent","map","n","key","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65d783b1.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Calculator.css\";\n\nexport function AutoScalingText(props) {\n  const [scale, setScale] = useState(1);\n  const node = useRef(null);\n\n  useEffect(() => {\n    const { current } = node;\n    const { parentNode } = current;\n    const containerWidth = parentNode.offsetWidth;\n    const actualWidth = current.offsetWidth;\n    const actualScale = containerWidth / actualWidth;\n\n    if (actualScale < 1) {\n      setScale(actualScale);\n    } else {\n      setScale(1);\n    }\n  });\n\n  return (\n    <div\n      className=\"auto-scaling-text\"\n      style={{ transform: `scale(${scale})` }}\n      ref={node}\n    >\n      {props.children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { AutoScalingText } from \"./AutoScalingText\";\nimport \"./Calculator.css\";\n\nexport function CalculatorDisplay(props) {\n  const { value, ...rest } = props;\n\n  const language = navigator.language || \"en-US\";\n  let formattedValue = parseFloat(value).toLocaleString(language, {\n    useGrouping: true,\n    maximumFractionDigits: 6\n  });\n\n  const match = value.match(/\\.\\d*?(0*)$/);\n\n  if (match) formattedValue += /[1-9]/.test(match[0]) ? match[1] : match[0];\n\n  return (\n    <div {...rest} className=\"calculator-display\">\n      <AutoScalingText>{formattedValue}</AutoScalingText>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Calculator.css\";\n\nexport function CalculatorKey(props) {\n  const { onPress, className, text } = props;\n\n  return (\n    <button onClick={onPress} className={`calculator-key ${className}`}>\n      {text}\n    </button>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./Calculator.css\";\nimport { CalculatorDisplay } from \"./CalculatorDisplay\";\nimport { CalculatorKey } from \"./CalculatorKey\";\n\nconst CalculatorOperations = {\n  \"/\": (prevValue, nextValue) => prevValue / nextValue,\n  \"*\": (prevValue, nextValue) => prevValue * nextValue,\n  \"+\": (prevValue, nextValue) => prevValue + nextValue,\n  \"-\": (prevValue, nextValue) => prevValue - nextValue,\n  \"=\": (_, nextValue) => nextValue\n};\n\nconst numberKeys = Array.from({ length: 9 }, (_, index) => index + 1);\n\nexport function Calculator() {\n  const [value, setValue] = useState(null);\n  const [displayValue, setDisplayValue] = useState(\"0\");\n  const [operator, setOperator] = useState(null);\n  const [waitingForOperand, setWaitingForOperand] = useState(false);\n\n  function clearAll() {\n    setValue(null);\n    setDisplayValue(\"0\");\n    setOperator(null);\n    setWaitingForOperand(false);\n  }\n\n  function toggleSign() {\n    const newValue = parseFloat(displayValue) * -1;\n    setDisplayValue(String(newValue));\n  }\n\n  function inputPercent() {\n    const currentValue = parseFloat(displayValue);\n\n    if (currentValue === 0) return;\n\n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, \"\");\n    const newValue = parseFloat(displayValue) / 100;\n    setDisplayValue(String(newValue.toFixed(fixedDigits.length + 2)));\n  }\n\n  function inputDot() {\n    if (!/\\./.test(displayValue)) {\n      setDisplayValue(displayValue + \".\");\n      setWaitingForOperand(false);\n    }\n  }\n\n  function inputDigit(digit) {\n    if (waitingForOperand) {\n      setDisplayValue(String(digit));\n      setWaitingForOperand(false);\n    } else {\n      setDisplayValue(\n        displayValue === \"0\" ? String(digit) : displayValue + digit\n      );\n    }\n  }\n\n  function performOperation(nextOperator) {\n    const inputValue = parseFloat(displayValue);\n\n    if (value == null) {\n      setValue(inputValue);\n    } else if (operator) {\n      const currentValue = value || 0;\n      const newValue = CalculatorOperations[operator](currentValue, inputValue);\n      setValue(newValue);\n      setDisplayValue(String(newValue));\n    }\n\n    setWaitingForOperand(true);\n    setOperator(nextOperator);\n  }\n\n  return (\n    <div className=\"calculator\">\n      <CalculatorDisplay value={displayValue} />\n      <div className=\"calculator-keypad\">\n        <div className=\"input-keys\">\n          <div className=\"function-keys\">\n            <CalculatorKey onPress={() => clearAll()} text=\"AC\" />\n            <CalculatorKey text=\"±\" onPress={() => toggleSign()} />\n            <CalculatorKey text=\"%\" onPress={() => inputPercent()} />\n          </div>\n\n          <div className=\"digit-keys\">\n            <CalculatorKey\n              className=\"key-0\"\n              onPress={() => inputDigit(0)}\n              text=\"0\"\n            />\n            <CalculatorKey\n              className=\"key-dot\"\n              onPress={() => inputDot()}\n              text=\"●\"\n            />\n            {numberKeys.map(n => (\n              <CalculatorKey key={n} onPress={() => inputDigit(n)} text={n} />\n            ))}\n          </div>\n        </div>\n        <div className=\"operator-keys\">\n          <CalculatorKey text=\"÷\" onPress={() => performOperation(\"/\")} />\n          <CalculatorKey text=\"×\" onPress={() => performOperation(\"*\")} />\n          <CalculatorKey text=\"-\" onPress={() => performOperation(\"-\")} />\n          <CalculatorKey text=\"+\" onPress={() => performOperation(\"+\")} />\n          <CalculatorKey text=\"=\" onPress={() => performOperation(\"=\")} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Calculator } from \"./Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}